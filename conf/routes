# This file is part of the flimey-core software.
# Copyright (C) 2020  Karl Kegel
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Routes

# serve all files from the public folder
GET     /assets/*file                                       controllers.Assets.versioned(path="/public", file: Asset)


GET     /                                                   controllers.ApplicationController.index()
GET     /overview                                           controllers.NewsController.index()

GET     /login                                              controllers.AuthController.getLoginPage()
POST    /login                                              controllers.AuthController.login()
POST    /login/delete                                       controllers.AuthController.logout(global: Option[Boolean] ?= None)

GET     /auth                                               controllers.AuthController.getAuthenticatePage()
POST    /auth                                               controllers.AuthController.authenticate()

GET     /account                                            controllers.AccountController.index()
GET     /account/overview                                   controllers.AccountController.getAccountOverview()


GET     /model                                              controllers.ModelController.index()

POST    /model/new                                          controllers.ModelController.addType
POST    /model/:typeId/delete                               controllers.ModelController.deleteType(typeId: Long)
POST    /model/:typeId/new                                  controllers.ModelController.addVersion(typeId: Long)
POST    /model/:typeId/:versionId/delete                    controllers.ModelController.deleteVersion(typeId: Long, versionId: Long)
POST    /model/:typeId/:versionId/fork                      controllers.ModelController.forkVersion(typeId: Long, versionId: Long)

GET     /model/:typeId/editor                               controllers.ModelController.getTypeEditor(typeId: Long)
POST    /model/:typeId/editor                               controllers.ModelController.postEntityType(typeId: Long)

GET     /model/:typeId/editor/:versionId                    controllers.ModelController.getVersionEditor(typeId: Long, versionId: Long)

POST    /model/:typeId/editor/:versionId/constraint                         controllers.ModelController.addConstraint(typeId: Long, versionId: Long)
POST    /model/:typeId/editor/:versionId/constraint/:constraintId/delete    controllers.ModelController.deleteConstraint(typeId: Long, versionId: Long, constraintId: Long)


GET     /asset                                              controllers.AssetController.index()
POST    /asset/type                                         controllers.AssetController.changeAssetType

POST    /asset/search                                       controllers.AssetController.searchAssets

GET     /asset/:typeId                                      controllers.AssetController.getAssets(typeId: Long, pageNumber: Int, groupSelector: Option[String] = None)
GET     /asset/:typeId/new                                  controllers.AssetController.getNewAssetEditor(typeId: Long)
POST    /asset/:typeId/new                                  controllers.AssetController.addNewAsset(typeId: Long)

GET     /asset/:typeId/editor/:assetId                      controllers.AssetController.getAssetEditor(typeId: Long, assetId: Long)
POST    /asset/:typeId/editor/:assetId                      controllers.AssetController.postAsset(typeId: Long, assetId: Long)
POST    /asset/:typeId/editor/:assetId/delete               controllers.AssetController.deleteAsset(typeId: Long, assetId: Long)


GET     /archive                                            controllers.ArchiveController.index(query: String)
POST    /archive/query                                      controllers.ArchiveController.query()


GET     /frame                                              controllers.FrameController.index()
POST    /frame/query                                        controllers.FrameController.findByQuery()

GET     /frame/query                                        controllers.FrameController.getFrames(typeSelector: Option[String] = None, groupSelector: Option[String] = None)

POST    /frame/new                                          controllers.FrameController.requestNewFrameEditor()
GET     /frame/:typeId/new                                  controllers.FrameController.getNewFrameEditor(typeId: Long)
POST    /frame/:typeId/new                                  controllers.FrameController.addNewFrame(typeId: Long)

GET     /frame/:frameId                                     controllers.FrameController.getFrame(frameId: Long)

GET     /frame/editor/:frameId                              controllers.FrameController.getFrameEditor(frameId: Long)
POST    /frame/editor/:frameId                              controllers.FrameController.postFrame(frameId: Long)
POST    /frame/editor/:frameId/delete                       controllers.FrameController.deleteFrame(frameId: Long)

GET     /frame/editor/:frameId/state                        controllers.FrameController.getStateEditor(frameId: Long)
POST    /frame/editor/:frameId/state                        controllers.FrameController.postState(frameId: Long)


POST    /frame/:frameId/subject/new                         controllers.SubjectController.requestNewSubjectEditor(frameId: Long)
GET     /frame/:frameId/subject/:typeId/new                 controllers.SubjectController.getNewSubjectEditor(frameId: Long, typeId: Long)
POST    /frame/:frameId/subject/:typeId/new                 controllers.SubjectController.addNewSubject(frameId: Long, typeId: Long)

GET     /frame/editor/:frameId/subject/:subjectId           controllers.SubjectController.getSubjectEditor(frameId: Long, subjectId: Long)
POST    /frame/editor/:frameId/subject/:subjectId           controllers.SubjectController.postSubject(frameId: Long, subjectId: Long)
POST    /frame/editor/:frameId/subject/:subjectId/delete    controllers.SubjectController.deleteSubject(frameId: Long, subjectId: Long)

GET     /frame/editor/:frameId/subject/:subjectId/state     controllers.SubjectController.getStateEditor(frameId: Long, subjectId: Long)
POST    /frame/editor/:frameId/subject/:subjectId/state     controllers.SubjectController.postState(frameId: Long, subjectId: Long)


GET     /management                                         controllers.ManagementController.index()

GET     /management/invitations                             controllers.ManagementController.getInvitedUsers()
GET     /management/invitations/new                         controllers.ManagementController.getInvitationForm()
POST    /management/invitations/new                         controllers.ManagementController.postNewInvitation()
POST    /management/invitations/:userId/delete              controllers.ManagementController.deleteInvitation(userId: Long)

GET     /management/groups                                  controllers.ManagementController.getGroups()
GET     /management/groups/new                              controllers.ManagementController.getNewGroupForm()
POST    /management/groups/new                              controllers.ManagementController.postNewGroup()
POST    /management/groups/:groupId/delete                  controllers.ManagementController.deleteGroup(groupId: Long)

GET     /management/groups/:groupId                         controllers.ManagementController.getGroupEditor(groupId: Long)
POST    /management/groups/:groupId/user                    controllers.ManagementController.addUserToGroup(groupId: Long)
POST    /management/groups/:groupId/user/:userId/delete     controllers.ManagementController.deleteUserFromGroup(groupId: Long, userId: Long)

GET     /management/groups/:groupId/viewer                  controllers.ManagementController.getGroupRelationEditor(groupId: Long)
POST    /management/groups/:groupId/viewer/new              controllers.ManagementController.postNewGroupRelation(groupId: Long)
POST    /management/groups/:groupId/viewer/:viewerId/delete controllers.ManagementController.deleteGroupRelation(groupId: Long, viewerId: Long)

GET     /management/users                                   controllers.ManagementController.getUsers()
GET     /management/users/:userId                           controllers.ManagementController.getUserEditor(userId: Long)
POST    /management/users/:userId                           controllers.ManagementController.postUser(userId: Long)
POST    /management/users/:userId/delete                    controllers.ManagementController.deleteUser(userId: Long)
POST    /management/users/:userId/logout                    controllers.ManagementController.logUserOut(userId: Long)

