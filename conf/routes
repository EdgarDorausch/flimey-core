# This file is part of the flimey-core software.
# Copyright (C) 2020  Karl Kegel
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Routes

# serve all files from the public folder
GET     /assets/*file                                       controllers.Assets.versioned(path="/public", file: Asset)


GET     /                                                   controllers.ApplicationController.index()
GET     /overview                                           controllers.ApplicationController.overview()

GET     /login                                              controllers.AuthController.getLoginPage()
POST    /login                                              controllers.AuthController.login()
POST    /login/delete                                       controllers.AuthController.logout(global: Option[Boolean] ?= None)

GET     /auth                                               controllers.AuthController.getAuthenticatePage()
POST    /auth                                               controllers.AuthController.authenticate()

GET     /account                                            controllers.AccountController.index()
GET     /account/overview                                   controllers.AccountController.getAccountOverview()

GET     /model                                              controllers.ModelController.index()

POST    /model/asset                                        controllers.ModelController.addType
POST    /model/asset/delete/:id                             controllers.ModelController.deleteType(id: Long)

# search for and open asset type editor
# FIXME
POST    /model/asset/search                                 controllers.ModelController.searchEntityType

GET     /model/asset/editor/:id                             controllers.ModelController.getTypeEditor(id: Long)
POST    /model/asset/editor/asset/:id                       controllers.ModelController.postEntityType(id: Long)
POST    /model/asset/editor/:id/constraint                  controllers.ModelController.addConstraint(id: Long)
POST    /model/asset/editor/:id/constraint/:cid/delete      controllers.ModelController.deleteConstraint(id: Long, cid: Long)

GET     /asset                                              controllers.AssetController.index()
POST    /asset/type                                         controllers.AssetController.changeAssetType

# FIXME
POST    /asset/search                                       controllers.AssetController.searchAssets

GET     /asset/:assetTypeId                                 controllers.AssetController.getAssets(assetTypeId: Long, pageNumber: Int, groupSelector: Option[String] = None)
GET     /asset/:assetTypeId/new                             controllers.AssetController.getNewAssetEditor(assetTypeId: Long)
POST    /asset/:assetTypeId/new                             controllers.AssetController.addNewAsset(assetTypeId: Long)

GET     /asset/:assetTypeId/editor/:assetId                 controllers.AssetController.getAssetEditor(assetTypeId: Long, assetId: Long)
POST    /asset/:assetTypeId/editor/:assetId                 controllers.AssetController.postAsset(assetTypeId: Long, assetId: Long)
POST    /asset/:assetTypeId/editor/:assetId/delete          controllers.AssetController.deleteAsset(assetTypeId: Long, assetId: Long)

GET     /collection                                         controllers.CollectionController.index()
POST    /collection/query                                   controllers.CollectionController.findByQuery()

GET     /collection/query                                   controllers.CollectionController.getCollections(typeSelector: Option[String] = None, groupSelector: Option[String] = None)

POST    /collection/new                                     controllers.CollectionController.requestNewCollectionEditor()
GET     /collection/:typeId/new                             controllers.CollectionController.getNewCollectionEditor(typeId: Long)
POST    /collection/:typeId/new                             controllers.CollectionController.addNewCollection(typeId: Long)

GET     /collection/:collectionId                           controllers.CollectionController.getCollection(collectionId: Long)

GET     /management                                         controllers.ManagementController.index()

GET     /management/invitations                             controllers.ManagementController.getInvitedUsers()
GET     /management/invitations/new                         controllers.ManagementController.getInvitationForm()
POST    /management/invitations/new                         controllers.ManagementController.postNewInvitation()
POST    /management/invitations/:userId/delete              controllers.ManagementController.deleteInvitation(userId: Long)

GET     /management/groups                                  controllers.ManagementController.getGroups()
GET     /management/groups/new                              controllers.ManagementController.getNewGroupForm()
POST    /management/groups/new                              controllers.ManagementController.postNewGroup()
POST    /management/groups/:groupId/delete                  controllers.ManagementController.deleteGroup(groupId: Long)

GET     /management/groups/:groupId                         controllers.ManagementController.getGroupEditor(groupId: Long)
POST    /management/groups/:groupId/user                    controllers.ManagementController.addUserToGroup(groupId: Long)
POST    /management/groups/:groupId/user/:userId/delete     controllers.ManagementController.deleteUserFromGroup(groupId: Long, userId: Long)

GET     /management/groups/:groupId/viewer                  controllers.ManagementController.getGroupRelationEditor(groupId: Long)
POST    /management/groups/:groupId/viewer/new              controllers.ManagementController.postNewGroupRelation(groupId: Long)
POST    /management/groups/:groupId/viewer/:viewerId/delete controllers.ManagementController.deleteGroupRelation(groupId: Long, viewerId: Long)

GET     /management/users                                   controllers.ManagementController.getUsers()
GET     /management/users/:userId                           controllers.ManagementController.getUserEditor(userId: Long)
POST    /management/users/:userId                           controllers.ManagementController.postUser(userId: Long)
POST    /management/users/:userId/delete                    controllers.ManagementController.deleteUser(userId: Long)
POST    /management/users/:userId/logout                    controllers.ManagementController.logUserOut(userId: Long)

